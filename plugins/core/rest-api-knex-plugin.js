
export const RestApiKnexPlugin = {
  name: 'rest-api-knex',


  install({ helpers, addScopeMethod, vars, addHook, apiOptions, pluginOptions }) {


    // Define default storage helpers that throw errors
    helpers.dataGet = async ({ scopeName, params }) => {
      throw new Error(`No storage implementation for get. Install a storage plugin.`);
    };
    
    helpers.dataQuery = async ({ scopeName, params }) => {
      throw new Error(`No storage implementation for query. Install a storage plugin.`);
    };
    
    helpers.dataPost = async ({ scopeName, params }) => {

      
      /*
       # Server-Side Procedure for Handling a POST with Relationships

# Scenario:
 The server receives a POST request to create a primary resource
 and link it to a mix of new and existing related resources.

 --------------------------------------------------------------------------
 Step 1: Initialization
 --------------------------------------------------------------------------

 1a. Start a database transaction. All subsequent operations must be
     part of this transaction to ensure atomicity.

 1b. Create an empty in-memory map or dictionary. This will be used
     to track the mapping from temporary client-side IDs to the
     real, permanent IDs generated by the database.

     let temporaryIdMap = new Map();

 --------------------------------------------------------------------------
 Step 2: First Pass - Process the `included` Array
 --------------------------------------------------------------------------

 Iterate through each resource object in the `included` array.

 For each resource:

 2a. Extract its client-generated temporary ID and attributes.
     (e.g., id: "temp-jane-doe", attributes: { name: "Jane Doe" })

 2b. Create this new record in the database.
     (e.g., INSERT INTO people (name) VALUES ('Jane Doe');)

 2c. Get the new, permanent ID returned by the database.
     (e.g., the database assigns real ID: 12)

 2d. Store this mapping in your lookup map.
     Key: A unique string like "people:temp-jane-doe"
     Value: The real ID and the full resource object for the response.
     Example: temporaryIdMap.set("people:temp-jane-doe", { realId: 12, ... });

 --------------------------------------------------------------------------
 Step 3: Second Pass - Process the Primary `data` Object
 --------------------------------------------------------------------------

 3a. Create the primary resource record.
     (e.g., INSERT INTO articles (title) VALUES ('A Joint Effort');)

 3b. Get the new, permanent ID for this primary resource.
     (e.g., the database assigns real ID: 126)

 3c. Iterate through the `relationships` object provided in the request.

 For each relationship link (e.g., { "type": "people", "id": "..." }):

   i.  Check if the ID is a temporary ID (e.g., a string).

   ii. If it IS a temporary ID (like "temp-jane-doe"):
       - Look it up in your `temporaryIdMap` to get the real ID (e.g., 12).
       - Use this real ID to create the database link (e.g., in an `article_authors` pivot table).

   iii. If it is NOT a temporary ID (e.g., a number like 9):
       - This is a link to an existing record.
       - CRUCIAL VALIDATION: You MUST query the database to confirm this ID exists.
         (e.g., SELECT id FROM people WHERE id = 9;)
       - If it does not exist, you MUST fail the entire operation and roll back the transaction.
       - If it exists, use this ID directly to create the database link.

 --------------------------------------------------------------------------
 Step 4: Finalization
 --------------------------------------------------------------------------

 4a. If all steps completed without error, commit the database transaction.

 4b. Assemble the final JSON:API response body:
     - The `data` member will be the new primary resource object (article 126).
     - The `relationships` inside `data` must be updated to use the REAL IDs.
     - The `included` member will be an array containing ONLY the full
       resource objects for the records that were created in Step 2.
       (e.g., the new "Jane Doe" object with its real ID 12).
       Do NOT include existing records (like author 9) in the response's `included` array. 

      */


      throw new Error(`No storage implementation for create. Install a storage plugin.`);
    };

    helpers.dataPatch = async ({ scopeName, params }) => {
      throw new Error(`No storage implementation for update. Install a storage plugin.`);
    };

    helpers.dataPut = async ({ scopeName, params }) => {
      throw new Error(`No storage implementation for update. Install a storage plugin.`);
    };
    
    helpers.dataDel = async ({ scopeName, params }) => {
      throw new Error(`No storage implementation for delete. Install a storage plugin.`);
    };
  },


}